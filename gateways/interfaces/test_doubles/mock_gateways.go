// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/int128/gradleupdate/gateways/interfaces (interfaces: BadgeLastAccessRepository,RepositoryLastUpdateRepository,RepositoryRepository,PullRequestRepository,GitService,GradleReleaseRepository,ConfigRepository)

// Package gatewaysTestDoubles is a generated GoMock package.
package gatewaysTestDoubles

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	domain "github.com/int128/gradleupdate/domain"
	git "github.com/int128/gradleupdate/domain/git"
	gradle "github.com/int128/gradleupdate/domain/gradle"
	interfaces "github.com/int128/gradleupdate/gateways/interfaces"
	reflect "reflect"
	time "time"
)

// MockBadgeLastAccessRepository is a mock of BadgeLastAccessRepository interface
type MockBadgeLastAccessRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBadgeLastAccessRepositoryMockRecorder
}

// MockBadgeLastAccessRepositoryMockRecorder is the mock recorder for MockBadgeLastAccessRepository
type MockBadgeLastAccessRepositoryMockRecorder struct {
	mock *MockBadgeLastAccessRepository
}

// NewMockBadgeLastAccessRepository creates a new mock instance
func NewMockBadgeLastAccessRepository(ctrl *gomock.Controller) *MockBadgeLastAccessRepository {
	mock := &MockBadgeLastAccessRepository{ctrl: ctrl}
	mock.recorder = &MockBadgeLastAccessRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBadgeLastAccessRepository) EXPECT() *MockBadgeLastAccessRepositoryMockRecorder {
	return m.recorder
}

// FindBySince mocks base method
func (m *MockBadgeLastAccessRepository) FindBySince(arg0 context.Context, arg1 time.Time) ([]domain.BadgeLastAccess, error) {
	ret := m.ctrl.Call(m, "FindBySince", arg0, arg1)
	ret0, _ := ret[0].([]domain.BadgeLastAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySince indicates an expected call of FindBySince
func (mr *MockBadgeLastAccessRepositoryMockRecorder) FindBySince(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySince", reflect.TypeOf((*MockBadgeLastAccessRepository)(nil).FindBySince), arg0, arg1)
}

// Save mocks base method
func (m *MockBadgeLastAccessRepository) Save(arg0 context.Context, arg1 domain.BadgeLastAccess) error {
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockBadgeLastAccessRepositoryMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockBadgeLastAccessRepository)(nil).Save), arg0, arg1)
}

// MockRepositoryLastUpdateRepository is a mock of RepositoryLastUpdateRepository interface
type MockRepositoryLastUpdateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryLastUpdateRepositoryMockRecorder
}

// MockRepositoryLastUpdateRepositoryMockRecorder is the mock recorder for MockRepositoryLastUpdateRepository
type MockRepositoryLastUpdateRepositoryMockRecorder struct {
	mock *MockRepositoryLastUpdateRepository
}

// NewMockRepositoryLastUpdateRepository creates a new mock instance
func NewMockRepositoryLastUpdateRepository(ctrl *gomock.Controller) *MockRepositoryLastUpdateRepository {
	mock := &MockRepositoryLastUpdateRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryLastUpdateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepositoryLastUpdateRepository) EXPECT() *MockRepositoryLastUpdateRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockRepositoryLastUpdateRepository) Save(arg0 context.Context, arg1 domain.RepositoryLastUpdate) error {
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockRepositoryLastUpdateRepositoryMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepositoryLastUpdateRepository)(nil).Save), arg0, arg1)
}

// MockRepositoryRepository is a mock of RepositoryRepository interface
type MockRepositoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryRepositoryMockRecorder
}

// MockRepositoryRepositoryMockRecorder is the mock recorder for MockRepositoryRepository
type MockRepositoryRepositoryMockRecorder struct {
	mock *MockRepositoryRepository
}

// NewMockRepositoryRepository creates a new mock instance
func NewMockRepositoryRepository(ctrl *gomock.Controller) *MockRepositoryRepository {
	mock := &MockRepositoryRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepositoryRepository) EXPECT() *MockRepositoryRepositoryMockRecorder {
	return m.recorder
}

// Fork mocks base method
func (m *MockRepositoryRepository) Fork(arg0 context.Context, arg1 git.RepositoryID) (*git.Repository, error) {
	ret := m.ctrl.Call(m, "Fork", arg0, arg1)
	ret0, _ := ret[0].(*git.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fork indicates an expected call of Fork
func (mr *MockRepositoryRepositoryMockRecorder) Fork(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fork", reflect.TypeOf((*MockRepositoryRepository)(nil).Fork), arg0, arg1)
}

// Get mocks base method
func (m *MockRepositoryRepository) Get(arg0 context.Context, arg1 git.RepositoryID) (*git.Repository, error) {
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*git.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRepositoryRepositoryMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepositoryRepository)(nil).Get), arg0, arg1)
}

// GetBranch mocks base method
func (m *MockRepositoryRepository) GetBranch(arg0 context.Context, arg1 git.BranchID) (*git.Branch, error) {
	ret := m.ctrl.Call(m, "GetBranch", arg0, arg1)
	ret0, _ := ret[0].(*git.Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranch indicates an expected call of GetBranch
func (mr *MockRepositoryRepositoryMockRecorder) GetBranch(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranch", reflect.TypeOf((*MockRepositoryRepository)(nil).GetBranch), arg0, arg1)
}

// GetFileContent mocks base method
func (m *MockRepositoryRepository) GetFileContent(arg0 context.Context, arg1 git.RepositoryID, arg2 string) (git.FileContent, error) {
	ret := m.ctrl.Call(m, "GetFileContent", arg0, arg1, arg2)
	ret0, _ := ret[0].(git.FileContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileContent indicates an expected call of GetFileContent
func (mr *MockRepositoryRepositoryMockRecorder) GetFileContent(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileContent", reflect.TypeOf((*MockRepositoryRepository)(nil).GetFileContent), arg0, arg1, arg2)
}

// GetReadme mocks base method
func (m *MockRepositoryRepository) GetReadme(arg0 context.Context, arg1 git.RepositoryID) (git.FileContent, error) {
	ret := m.ctrl.Call(m, "GetReadme", arg0, arg1)
	ret0, _ := ret[0].(git.FileContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReadme indicates an expected call of GetReadme
func (mr *MockRepositoryRepositoryMockRecorder) GetReadme(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadme", reflect.TypeOf((*MockRepositoryRepository)(nil).GetReadme), arg0, arg1)
}

// MockPullRequestRepository is a mock of PullRequestRepository interface
type MockPullRequestRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPullRequestRepositoryMockRecorder
}

// MockPullRequestRepositoryMockRecorder is the mock recorder for MockPullRequestRepository
type MockPullRequestRepositoryMockRecorder struct {
	mock *MockPullRequestRepository
}

// NewMockPullRequestRepository creates a new mock instance
func NewMockPullRequestRepository(ctrl *gomock.Controller) *MockPullRequestRepository {
	mock := &MockPullRequestRepository{ctrl: ctrl}
	mock.recorder = &MockPullRequestRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPullRequestRepository) EXPECT() *MockPullRequestRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockPullRequestRepository) Create(arg0 context.Context, arg1 git.PullRequest) (*git.PullRequest, error) {
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*git.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockPullRequestRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPullRequestRepository)(nil).Create), arg0, arg1)
}

// MockGitService is a mock of GitService interface
type MockGitService struct {
	ctrl     *gomock.Controller
	recorder *MockGitServiceMockRecorder
}

// MockGitServiceMockRecorder is the mock recorder for MockGitService
type MockGitServiceMockRecorder struct {
	mock *MockGitService
}

// NewMockGitService creates a new mock instance
func NewMockGitService(ctrl *gomock.Controller) *MockGitService {
	mock := &MockGitService{ctrl: ctrl}
	mock.recorder = &MockGitServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGitService) EXPECT() *MockGitServiceMockRecorder {
	return m.recorder
}

// CreateBranch mocks base method
func (m *MockGitService) CreateBranch(arg0 context.Context, arg1 interfaces.PushBranchRequest) (*git.Branch, error) {
	ret := m.ctrl.Call(m, "CreateBranch", arg0, arg1)
	ret0, _ := ret[0].(*git.Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBranch indicates an expected call of CreateBranch
func (mr *MockGitServiceMockRecorder) CreateBranch(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBranch", reflect.TypeOf((*MockGitService)(nil).CreateBranch), arg0, arg1)
}

// UpdateForceBranch mocks base method
func (m *MockGitService) UpdateForceBranch(arg0 context.Context, arg1 interfaces.PushBranchRequest) (*git.Branch, error) {
	ret := m.ctrl.Call(m, "UpdateForceBranch", arg0, arg1)
	ret0, _ := ret[0].(*git.Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateForceBranch indicates an expected call of UpdateForceBranch
func (mr *MockGitServiceMockRecorder) UpdateForceBranch(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateForceBranch", reflect.TypeOf((*MockGitService)(nil).UpdateForceBranch), arg0, arg1)
}

// MockGradleReleaseRepository is a mock of GradleReleaseRepository interface
type MockGradleReleaseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGradleReleaseRepositoryMockRecorder
}

// MockGradleReleaseRepositoryMockRecorder is the mock recorder for MockGradleReleaseRepository
type MockGradleReleaseRepositoryMockRecorder struct {
	mock *MockGradleReleaseRepository
}

// NewMockGradleReleaseRepository creates a new mock instance
func NewMockGradleReleaseRepository(ctrl *gomock.Controller) *MockGradleReleaseRepository {
	mock := &MockGradleReleaseRepository{ctrl: ctrl}
	mock.recorder = &MockGradleReleaseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGradleReleaseRepository) EXPECT() *MockGradleReleaseRepositoryMockRecorder {
	return m.recorder
}

// GetCurrent mocks base method
func (m *MockGradleReleaseRepository) GetCurrent(arg0 context.Context) (*gradle.Release, error) {
	ret := m.ctrl.Call(m, "GetCurrent", arg0)
	ret0, _ := ret[0].(*gradle.Release)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrent indicates an expected call of GetCurrent
func (mr *MockGradleReleaseRepositoryMockRecorder) GetCurrent(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrent", reflect.TypeOf((*MockGradleReleaseRepository)(nil).GetCurrent), arg0)
}

// MockConfigRepository is a mock of ConfigRepository interface
type MockConfigRepository struct {
	ctrl     *gomock.Controller
	recorder *MockConfigRepositoryMockRecorder
}

// MockConfigRepositoryMockRecorder is the mock recorder for MockConfigRepository
type MockConfigRepositoryMockRecorder struct {
	mock *MockConfigRepository
}

// NewMockConfigRepository creates a new mock instance
func NewMockConfigRepository(ctrl *gomock.Controller) *MockConfigRepository {
	mock := &MockConfigRepository{ctrl: ctrl}
	mock.recorder = &MockConfigRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigRepository) EXPECT() *MockConfigRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockConfigRepository) Get(arg0 context.Context) (*domain.Config, error) {
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*domain.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockConfigRepositoryMockRecorder) Get(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConfigRepository)(nil).Get), arg0)
}
