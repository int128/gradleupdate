// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/int128/gradleupdate/gateways/interfaces (interfaces: RepositoryError,BadgeLastAccessRepository,RepositoryLastScanRepository,RepositoryRepository,PullRequestRepository,GitService,GradleService)

// Package gateways is a generated GoMock package.
package gateways

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	domain "github.com/int128/gradleupdate/domain"
	interfaces "github.com/int128/gradleupdate/gateways/interfaces"
	reflect "reflect"
	time "time"
)

// MockRepositoryError is a mock of RepositoryError interface
type MockRepositoryError struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryErrorMockRecorder
}

// MockRepositoryErrorMockRecorder is the mock recorder for MockRepositoryError
type MockRepositoryErrorMockRecorder struct {
	mock *MockRepositoryError
}

// NewMockRepositoryError creates a new mock instance
func NewMockRepositoryError(ctrl *gomock.Controller) *MockRepositoryError {
	mock := &MockRepositoryError{ctrl: ctrl}
	mock.recorder = &MockRepositoryErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepositoryError) EXPECT() *MockRepositoryErrorMockRecorder {
	return m.recorder
}

// Error mocks base method
func (m *MockRepositoryError) Error() string {
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error
func (mr *MockRepositoryErrorMockRecorder) Error() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockRepositoryError)(nil).Error))
}

// NoSuchEntity mocks base method
func (m *MockRepositoryError) NoSuchEntity() bool {
	ret := m.ctrl.Call(m, "NoSuchEntity")
	ret0, _ := ret[0].(bool)
	return ret0
}

// NoSuchEntity indicates an expected call of NoSuchEntity
func (mr *MockRepositoryErrorMockRecorder) NoSuchEntity() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NoSuchEntity", reflect.TypeOf((*MockRepositoryError)(nil).NoSuchEntity))
}

// MockBadgeLastAccessRepository is a mock of BadgeLastAccessRepository interface
type MockBadgeLastAccessRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBadgeLastAccessRepositoryMockRecorder
}

// MockBadgeLastAccessRepositoryMockRecorder is the mock recorder for MockBadgeLastAccessRepository
type MockBadgeLastAccessRepositoryMockRecorder struct {
	mock *MockBadgeLastAccessRepository
}

// NewMockBadgeLastAccessRepository creates a new mock instance
func NewMockBadgeLastAccessRepository(ctrl *gomock.Controller) *MockBadgeLastAccessRepository {
	mock := &MockBadgeLastAccessRepository{ctrl: ctrl}
	mock.recorder = &MockBadgeLastAccessRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBadgeLastAccessRepository) EXPECT() *MockBadgeLastAccessRepositoryMockRecorder {
	return m.recorder
}

// FindBySince mocks base method
func (m *MockBadgeLastAccessRepository) FindBySince(arg0 context.Context, arg1 time.Time) ([]domain.BadgeLastAccess, error) {
	ret := m.ctrl.Call(m, "FindBySince", arg0, arg1)
	ret0, _ := ret[0].([]domain.BadgeLastAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySince indicates an expected call of FindBySince
func (mr *MockBadgeLastAccessRepositoryMockRecorder) FindBySince(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySince", reflect.TypeOf((*MockBadgeLastAccessRepository)(nil).FindBySince), arg0, arg1)
}

// Save mocks base method
func (m *MockBadgeLastAccessRepository) Save(arg0 context.Context, arg1 domain.BadgeLastAccess) error {
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockBadgeLastAccessRepositoryMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockBadgeLastAccessRepository)(nil).Save), arg0, arg1)
}

// MockRepositoryLastScanRepository is a mock of RepositoryLastScanRepository interface
type MockRepositoryLastScanRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryLastScanRepositoryMockRecorder
}

// MockRepositoryLastScanRepositoryMockRecorder is the mock recorder for MockRepositoryLastScanRepository
type MockRepositoryLastScanRepositoryMockRecorder struct {
	mock *MockRepositoryLastScanRepository
}

// NewMockRepositoryLastScanRepository creates a new mock instance
func NewMockRepositoryLastScanRepository(ctrl *gomock.Controller) *MockRepositoryLastScanRepository {
	mock := &MockRepositoryLastScanRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryLastScanRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepositoryLastScanRepository) EXPECT() *MockRepositoryLastScanRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockRepositoryLastScanRepository) Save(arg0 context.Context, arg1 domain.RepositoryLastScan) error {
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockRepositoryLastScanRepositoryMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepositoryLastScanRepository)(nil).Save), arg0, arg1)
}

// MockRepositoryRepository is a mock of RepositoryRepository interface
type MockRepositoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryRepositoryMockRecorder
}

// MockRepositoryRepositoryMockRecorder is the mock recorder for MockRepositoryRepository
type MockRepositoryRepositoryMockRecorder struct {
	mock *MockRepositoryRepository
}

// NewMockRepositoryRepository creates a new mock instance
func NewMockRepositoryRepository(ctrl *gomock.Controller) *MockRepositoryRepository {
	mock := &MockRepositoryRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepositoryRepository) EXPECT() *MockRepositoryRepositoryMockRecorder {
	return m.recorder
}

// Fork mocks base method
func (m *MockRepositoryRepository) Fork(arg0 context.Context, arg1 domain.RepositoryID) (*domain.Repository, error) {
	ret := m.ctrl.Call(m, "Fork", arg0, arg1)
	ret0, _ := ret[0].(*domain.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fork indicates an expected call of Fork
func (mr *MockRepositoryRepositoryMockRecorder) Fork(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fork", reflect.TypeOf((*MockRepositoryRepository)(nil).Fork), arg0, arg1)
}

// Get mocks base method
func (m *MockRepositoryRepository) Get(arg0 context.Context, arg1 domain.RepositoryID) (*domain.Repository, error) {
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*domain.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRepositoryRepositoryMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepositoryRepository)(nil).Get), arg0, arg1)
}

// GetBranch mocks base method
func (m *MockRepositoryRepository) GetBranch(arg0 context.Context, arg1 domain.BranchID) (*domain.Branch, error) {
	ret := m.ctrl.Call(m, "GetBranch", arg0, arg1)
	ret0, _ := ret[0].(*domain.Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranch indicates an expected call of GetBranch
func (mr *MockRepositoryRepositoryMockRecorder) GetBranch(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranch", reflect.TypeOf((*MockRepositoryRepository)(nil).GetBranch), arg0, arg1)
}

// GetFileContent mocks base method
func (m *MockRepositoryRepository) GetFileContent(arg0 context.Context, arg1 domain.RepositoryID, arg2 string) (domain.FileContent, error) {
	ret := m.ctrl.Call(m, "GetFileContent", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.FileContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileContent indicates an expected call of GetFileContent
func (mr *MockRepositoryRepositoryMockRecorder) GetFileContent(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileContent", reflect.TypeOf((*MockRepositoryRepository)(nil).GetFileContent), arg0, arg1, arg2)
}

// GetReadme mocks base method
func (m *MockRepositoryRepository) GetReadme(arg0 context.Context, arg1 domain.RepositoryID) (domain.FileContent, error) {
	ret := m.ctrl.Call(m, "GetReadme", arg0, arg1)
	ret0, _ := ret[0].(domain.FileContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReadme indicates an expected call of GetReadme
func (mr *MockRepositoryRepositoryMockRecorder) GetReadme(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadme", reflect.TypeOf((*MockRepositoryRepository)(nil).GetReadme), arg0, arg1)
}

// MockPullRequestRepository is a mock of PullRequestRepository interface
type MockPullRequestRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPullRequestRepositoryMockRecorder
}

// MockPullRequestRepositoryMockRecorder is the mock recorder for MockPullRequestRepository
type MockPullRequestRepositoryMockRecorder struct {
	mock *MockPullRequestRepository
}

// NewMockPullRequestRepository creates a new mock instance
func NewMockPullRequestRepository(ctrl *gomock.Controller) *MockPullRequestRepository {
	mock := &MockPullRequestRepository{ctrl: ctrl}
	mock.recorder = &MockPullRequestRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPullRequestRepository) EXPECT() *MockPullRequestRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockPullRequestRepository) Create(arg0 context.Context, arg1 domain.PullRequest) (*domain.PullRequest, error) {
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*domain.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockPullRequestRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPullRequestRepository)(nil).Create), arg0, arg1)
}

// FindByBranch mocks base method
func (m *MockPullRequestRepository) FindByBranch(arg0 context.Context, arg1, arg2 domain.BranchID) (*domain.PullRequest, error) {
	ret := m.ctrl.Call(m, "FindByBranch", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByBranch indicates an expected call of FindByBranch
func (mr *MockPullRequestRepositoryMockRecorder) FindByBranch(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByBranch", reflect.TypeOf((*MockPullRequestRepository)(nil).FindByBranch), arg0, arg1, arg2)
}

// MockGitService is a mock of GitService interface
type MockGitService struct {
	ctrl     *gomock.Controller
	recorder *MockGitServiceMockRecorder
}

// MockGitServiceMockRecorder is the mock recorder for MockGitService
type MockGitServiceMockRecorder struct {
	mock *MockGitService
}

// NewMockGitService creates a new mock instance
func NewMockGitService(ctrl *gomock.Controller) *MockGitService {
	mock := &MockGitService{ctrl: ctrl}
	mock.recorder = &MockGitServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGitService) EXPECT() *MockGitServiceMockRecorder {
	return m.recorder
}

// CreateBranch mocks base method
func (m *MockGitService) CreateBranch(arg0 context.Context, arg1 interfaces.PushBranchRequest) (*domain.Branch, error) {
	ret := m.ctrl.Call(m, "CreateBranch", arg0, arg1)
	ret0, _ := ret[0].(*domain.Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBranch indicates an expected call of CreateBranch
func (mr *MockGitServiceMockRecorder) CreateBranch(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBranch", reflect.TypeOf((*MockGitService)(nil).CreateBranch), arg0, arg1)
}

// UpdateForceBranch mocks base method
func (m *MockGitService) UpdateForceBranch(arg0 context.Context, arg1 interfaces.PushBranchRequest) (*domain.Branch, error) {
	ret := m.ctrl.Call(m, "UpdateForceBranch", arg0, arg1)
	ret0, _ := ret[0].(*domain.Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateForceBranch indicates an expected call of UpdateForceBranch
func (mr *MockGitServiceMockRecorder) UpdateForceBranch(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateForceBranch", reflect.TypeOf((*MockGitService)(nil).UpdateForceBranch), arg0, arg1)
}

// MockGradleService is a mock of GradleService interface
type MockGradleService struct {
	ctrl     *gomock.Controller
	recorder *MockGradleServiceMockRecorder
}

// MockGradleServiceMockRecorder is the mock recorder for MockGradleService
type MockGradleServiceMockRecorder struct {
	mock *MockGradleService
}

// NewMockGradleService creates a new mock instance
func NewMockGradleService(ctrl *gomock.Controller) *MockGradleService {
	mock := &MockGradleService{ctrl: ctrl}
	mock.recorder = &MockGradleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGradleService) EXPECT() *MockGradleServiceMockRecorder {
	return m.recorder
}

// GetCurrentVersion mocks base method
func (m *MockGradleService) GetCurrentVersion(arg0 context.Context) (domain.GradleVersion, error) {
	ret := m.ctrl.Call(m, "GetCurrentVersion", arg0)
	ret0, _ := ret[0].(domain.GradleVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentVersion indicates an expected call of GetCurrentVersion
func (mr *MockGradleServiceMockRecorder) GetCurrentVersion(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentVersion", reflect.TypeOf((*MockGradleService)(nil).GetCurrentVersion), arg0)
}
