// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/int128/gradleupdate/app/domain/repositories (interfaces: PullRequest)

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	domain "github.com/int128/gradleupdate/domain"
	repositories "github.com/int128/gradleupdate/domain/repositories"
	reflect "reflect"
)

// MockPullRequest is a mock of PullRequest interface
type MockPullRequest struct {
	ctrl     *gomock.Controller
	recorder *MockPullRequestMockRecorder
}

// MockPullRequestMockRecorder is the mock recorder for MockPullRequest
type MockPullRequestMockRecorder struct {
	mock *MockPullRequest
}

// NewMockPullRequest creates a new mock instance
func NewMockPullRequest(ctrl *gomock.Controller) *MockPullRequest {
	mock := &MockPullRequest{ctrl: ctrl}
	mock.recorder = &MockPullRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPullRequest) EXPECT() *MockPullRequestMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockPullRequest) Create(arg0 context.Context, arg1 domain.PullRequest) (domain.PullRequest, error) {
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(domain.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockPullRequestMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPullRequest)(nil).Create), arg0, arg1)
}

// Query mocks base method
func (m *MockPullRequest) Query(arg0 context.Context, arg1 repositories.PullRequestQuery) ([]domain.PullRequest, error) {
	ret := m.ctrl.Call(m, "Query", arg0, arg1)
	ret0, _ := ret[0].([]domain.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockPullRequestMockRecorder) Query(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockPullRequest)(nil).Query), arg0, arg1)
}

// Update mocks base method
func (m *MockPullRequest) Update(arg0 context.Context, arg1 domain.PullRequest) (domain.PullRequest, error) {
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(domain.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockPullRequestMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPullRequest)(nil).Update), arg0, arg1)
}
