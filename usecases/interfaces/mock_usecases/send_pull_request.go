// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/int128/gradleupdate/usecases/interfaces (interfaces: SendPullRequest)

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	interfaces "github.com/int128/gradleupdate/usecases/interfaces"
	reflect "reflect"
)

// MockSendPullRequest is a mock of SendPullRequest interface
type MockSendPullRequest struct {
	ctrl     *gomock.Controller
	recorder *MockSendPullRequestMockRecorder
}

// MockSendPullRequestMockRecorder is the mock recorder for MockSendPullRequest
type MockSendPullRequestMockRecorder struct {
	mock *MockSendPullRequest
}

// NewMockSendPullRequest creates a new mock instance
func NewMockSendPullRequest(ctrl *gomock.Controller) *MockSendPullRequest {
	mock := &MockSendPullRequest{ctrl: ctrl}
	mock.recorder = &MockSendPullRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSendPullRequest) EXPECT() *MockSendPullRequestMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockSendPullRequest) Do(arg0 context.Context, arg1 interfaces.SendPullRequestRequest) error {
	ret := m.ctrl.Call(m, "Do", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do
func (mr *MockSendPullRequestMockRecorder) Do(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockSendPullRequest)(nil).Do), arg0, arg1)
}
