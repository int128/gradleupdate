// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/int128/gradleupdate/usecases/interfaces (interfaces: GetRepository)

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	domain "github.com/int128/gradleupdate/domain"
	interfaces "github.com/int128/gradleupdate/usecases/interfaces"
	reflect "reflect"
)

// MockGetRepository is a mock of GetRepository interface
type MockGetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGetRepositoryMockRecorder
}

// MockGetRepositoryMockRecorder is the mock recorder for MockGetRepository
type MockGetRepositoryMockRecorder struct {
	mock *MockGetRepository
}

// NewMockGetRepository creates a new mock instance
func NewMockGetRepository(ctrl *gomock.Controller) *MockGetRepository {
	mock := &MockGetRepository{ctrl: ctrl}
	mock.recorder = &MockGetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGetRepository) EXPECT() *MockGetRepositoryMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockGetRepository) Do(arg0 context.Context, arg1 domain.RepositoryID) (*interfaces.GetRepositoryResponse, error) {
	ret := m.ctrl.Call(m, "Do", arg0, arg1)
	ret0, _ := ret[0].(*interfaces.GetRepositoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockGetRepositoryMockRecorder) Do(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockGetRepository)(nil).Do), arg0, arg1)
}
