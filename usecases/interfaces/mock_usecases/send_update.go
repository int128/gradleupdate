// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/int128/gradleupdate/usecases/interfaces (interfaces: SendUpdate)

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	domain "github.com/int128/gradleupdate/domain"
	reflect "reflect"
)

// MockSendUpdate is a mock of SendUpdate interface
type MockSendUpdate struct {
	ctrl     *gomock.Controller
	recorder *MockSendUpdateMockRecorder
}

// MockSendUpdateMockRecorder is the mock recorder for MockSendUpdate
type MockSendUpdateMockRecorder struct {
	mock *MockSendUpdate
}

// NewMockSendUpdate creates a new mock instance
func NewMockSendUpdate(ctrl *gomock.Controller) *MockSendUpdate {
	mock := &MockSendUpdate{ctrl: ctrl}
	mock.recorder = &MockSendUpdateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSendUpdate) EXPECT() *MockSendUpdateMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockSendUpdate) Do(arg0 context.Context, arg1 domain.RepositoryID, arg2 string) error {
	ret := m.ctrl.Call(m, "Do", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do
func (mr *MockSendUpdateMockRecorder) Do(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockSendUpdate)(nil).Do), arg0, arg1, arg2)
}
